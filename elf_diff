#!/usr/bin/python
  
# -*- coding: utf-8 -*-

# -*- mode: python -*-
#
# compare_firmware_symbols
#
# Copyright (C) 2019  Noseglasses (shinynoseglasses@gmail.com)
#
# This program is free software: you can redistribute it and/or modify it under it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but WITHOUT but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with along with
# this program. If not, see <http://www.gnu.org/licenses/>.
#

class Settings(object):
   
   def __init__(self):
      
      self.remove_html_file = False
      
      import argparse
      import sys

      parser = argparse.ArgumentParser(description='Compare elf binaries and list the differences in the disassembly.')
      parser.add_argument('--old', default = None, dest='old_binary_filename', help='The old elf binary')
      parser.add_argument('--new', default = None, dest='new_binary_filename', help='The new elf binary')
      parser.add_argument("binaries", nargs='*', default = None, help='The binaries (this is an alternative to --old and --new)')
      parser.add_argument('--old-alias', default = None, dest='old_alias', help='An alias string that is supposed to be used to reference the old binary')
      parser.add_argument('--new-alias', default = None, dest='new_alias', help='An alias string that is supposed to be used to reference the new binary')
      parser.add_argument('--bin-dir', default='/usr/bin', dest='bin_dir', help='The place where the binaries live')
      parser.add_argument('--bin-prefix', default='', dest='bin_prefix', help='A prefix to be added to all binutils commands')
      parser.add_argument('--text-file', default=None, dest='text_file', help='A text file to write output to')
      parser.add_argument('--html-file', default=None, dest='html_file', help='A html file to write output to')
      parser.add_argument('--pdf-file', default=None, dest='pdf_file', help='A pdf file to write output to (details are skipped in pdf files)')
      parser.add_argument('--project-title', default=None, dest='project_title', help='A project title to use in reports')
      
      actual_args = list()
      for arg_pos in range(1, len(sys.argv)):
         arg = sys.argv[arg_pos]
         if arg == "--":
               break
         actual_args.append(arg)
           
      args = parser.parse_args(actual_args)
      
      if len(args.binaries) == 0:
         if not args.old_binary_filename:
            print "No old binary filename defined"
            exit(1)
         else:
            self.old_binary_filename = args.old_binary_filename
            
         if not args.new_binary_filename:
            print "No new binary filename defined"
            exit(1)
         else:
            self.new_binary_filename = args.new_binary_filename
      elif len(args.binaries) == 2:
         if args.old_binary_filename:
            print "Old binary filename redundantly defined"
            exit(1)
         else:
            self.old_binary_filename = args.binaries[0]
            
         if args.new_binary_filename:
            print "Old binary filename redundantly defined"
            exit(1)
         else:
            self.new_binary_filename = args.binaries[1]
      else:
         print "Please specify either none or two binaries"
         exit(1)
      
      if args.old_alias:
         self.old_alias = args.old_alias
      else:
         self.old_alias = self.old_binary_filename
      
      if args.new_alias:
         self.new_alias = args.new_alias
      else:
         self.new_alias = self.new_binary_filename
         
      self.bin_dir = args.bin_dir
      self.bin_prefix = args.bin_prefix
      
      self.text_file = args.text_file
      self.html_file = args.html_file
      self.pdf_file = args.pdf_file
      
      if self.pdf_file and not self.html_file:
         import tempfile
         self.html_file = tempfile._get_default_tempdir() + \
            "/" + next(tempfile._get_candidate_names()) + ".html"
         self.remove_html_file = True
      
      self.objdump_command = self.bin_dir + "/" + self.bin_prefix + "objdump"
      self.nm_command = self.bin_dir + "/" + self.bin_prefix + "nm"
      self.size_command = self.bin_dir + "/" + self.bin_prefix + "size"
      
      self.project_title = args.project_title
      
      self.validate()
      
   def validate(self):

      import os.path
      import sys
      
      if not os.path.isfile(self.old_binary_filename):
         print "Old binary \'%s\' is not a file or cannot be found" % (self.old_binary_filename)
         sys.exit(1)
         
      if not os.path.isfile(self.new_binary_filename):
         print "New binary \'%s\' is not a file or cannot be found" % (self.new_binary_filename)
         sys.exit(1)
         
      if (not os.path.isfile(self.objdump_command)) or (not os.access(self.objdump_command, os.X_OK)):
         print "objdump command \'%s\' is either not a file or not executable" % (self.objdump_command)
         sys.exit(1)
         
      if (not os.path.isfile(self.nm_command)) or (not os.access(self.nm_command, os.X_OK)):
         print "nm command \'%s\' is either not a file or not executable" % (self.nm_command)
         sys.exit(1)
               
      if (not os.path.isfile(self.size_command)) or (not os.access(self.size_command, os.X_OK)):
         print "size command \'%s\' is either not a file or not executable" % (self.size_command)
         sys.exit(1)
         
class Symbol(object):
   
   def __init__(self, name):
      self.name = name
      self.instruction_lines = []
      self.size = 0
      
   def addInstuctions(self, instruction_line):
      self.instruction_lines.append(instruction_line)
      
   def __eq__(self, other):
      if not self.name == other.name:
         #print "Symbol name differs"
         return False
      
      if not self.size == other.size:
         return False
      
      if not len(self.instruction_lines) == len(other.instruction_lines):
         #print "Instructions differ"
         return False
      
      symbol_diff = [i for i, j in zip(self.instruction_lines, other.instruction_lines) if i != j]
      if len(symbol_diff) > 0:
         #print "Symbols differ"
         return False
      
      #print "Symbols equal"
      return True
   
   def getDifferencesAsString(self, other, indent):
      
      import difflib
      #from difflib_data import *

      diff = difflib.ndiff(self.instruction_lines, other.instruction_lines)
      #print list(diff)
      return indent + ("\n" + indent).join(list(diff))
   
   def getInstructionsBlock(self, indent):
      return indent + ("\n" + indent).join(self.instruction_lines)
      
class Binary(object):
   
   def __init__(self, settings, filename):
      
      self.settings = settings
      self.filename = filename
      self.symbols = {}
      
      self.parseSymbols()
      
   def readObjdumpOutput(self):
      
      import subprocess
      
      cmd = [self.settings.objdump_command, '-d', '-C', self.filename]
      proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

      o, e = proc.communicate()
      
      output = o.decode('ascii')
      #error = e.decode('ascii')
      
      return output
   
   def readNMOutput(self):
      
      import subprocess
      
      cmd = [self.settings.nm_command, '--print-size', '--size-sort', '--radix=d', '-C', self.filename]
      proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

      o, e = proc.communicate()
      
      output = o.decode('ascii')
      #error = e.decode('ascii')
      
      return output
   
   def readSizeOutput(self):
            
      import subprocess
      
      cmd = [self.settings.size_command, self.filename]
      proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

      o, e = proc.communicate()
      
      output = o.decode('ascii')
      #error = e.decode('ascii')
      
      return output
   
   def parseSymbols(self):
      
      import re
      
      size_output = self.readSizeOutput()
      
      size_re = re.compile("^\s*([0-9]+)\s+([0-9]+)\s+([0-9]+)\s+([0-9]+)")
      for line in size_output.split("\n"):
         size_match = re.match(size_re, line)
         if size_match:
            self.text_size = int(size_match.group(1))
            self.data_size = int(size_match.group(2))
            self.bss_size = int(size_match.group(3))
            self.overall_size = int(size_match.group(4))
                               
            self.progmem_size = self.text_size + self.data_size
            self.static_ram_size = self.data_size + self.bss_size
            
            break
         
      objdump_output = self.readObjdumpOutput()
      
      #print "Output:"
      #print "%s" % (objdump_output)
      
      header_line_re = re.compile("^[0-9A-Fa-f]+ <(.+)>:")
      instruction_line_re = re.compile("^\s*[0-9A-Fa-f]+:\s+(.*)")
      empty_line_re = re.compile("^\s*$")
                                  
      cur_symbol = None
      n_symbols = 0
      
      for line in objdump_output.split("\n"):
         
         header_match = re.match(header_line_re, line)
         if header_match:
            cur_symbol = Symbol(header_match.group(1))
            n_symbols += 1
            #print "Found symbol %s" % (header_match.group(1))
         else:
            instruction_line_match = re.match(instruction_line_re, line)
            if instruction_line_match:
               #print "Found instruction line \'%s\'" % (instruction_line_match.group(1))
               cur_symbol.addInstuctions(instruction_line_match.group(1))
            else:
               empty_line_match = re.match(empty_line_re, line)
               if empty_line_match:
                  if cur_symbol:
                     self.symbols[cur_symbol.name] = cur_symbol
                     cur_symbol = None
      
      nm_output = self.readNMOutput()
      
      nm_regex = re.compile("^[0-9A-Fa-f]+\s([0-9A-Fa-f]+)\s\w\s(.+)")
      for line in nm_output.split("\n"):
         nm_match = re.match(nm_regex, line)
         
         if nm_match:
            symbol_size_str = nm_match.group(1)
            symbol_name = nm_match.group(2)
            #print "Symbol %s: %d bytes" % (symbol_name, int(symbol_size_str))
            
            if not symbol_name in self.symbols.keys():
               data_symbol = Symbol(symbol_name)
               data_symbol.size = int(symbol_size_str)
               self.symbols[symbol_name] = data_symbol
            else:
               self.symbols[symbol_name].size = int(symbol_size_str)
         
   def __eq__(self, other):
      
      if len(self.symbols) != len(other.symbols):
         #print "Number of symbols differs"
         return False
      
      # Check if symbol names differ
      
      old_symbols = set(self.symbols.keys())
      new_symbols = set(other.symbols.keys())
      
      only_in_self = old_symbols - new_symbols
      if len(only_in_self) > 0:
         #print "Some symbols only in self"
         return False
      
      only_in_other = new_symbols - old_symbols
      if len(only_in_other) > 0:
         #print "Some symbols only in other"
         return False
      
      # Check if actual symbols differ
      
      for symbol_name in self.symbols.keys():
         
         old_symbol = self.symbols[symbol_name]
         new_symbol = other.symbols[symbol_name]
         
         if not (old_symbol == new_symbol):
            return False
         
      #print "Symbols identical"
         
      return True
   
   def __ne__(self, other):
      """Overrides the default implementation (unnecessary in Python 3)"""
      return not self.__eq__(other)
            
class Driver(object):
   
   def __init__(self):
  
      self.settings = Settings()
      
      self.old_binary = Binary(self.settings, self.settings.old_binary_filename)
      self.new_binary = Binary(self.settings, self.settings.new_binary_filename)
      
      self.prepareMeasures()
      
      file_output_requested = False
            
      if self.settings.html_file:
         file_output_requested = True
         self.writeHTMLFile()

      if self.settings.text_file:
         file_output_requested = True
         self.settings.out = open(self.settings.text_file, "w")
         
      if self.settings.pdf_file:
         file_output_requested = True
         import pdfkit
         pdfkit.from_url(self.settings.html_file, self.settings.pdf_file)
         if self.settings.remove_html_file:
            import os
            os.remove(self.settings.html_file)
               
      if not file_output_requested:
         import sys
         self.settings.out = sys.stdout
            
         self.writeTextFile()
         
   def prepareMeasures(self):
      
      self.common_symbol_names = sorted([value for value in self.old_binary.symbols.keys() if value in self.new_binary.symbols.keys()])
      
      self.old_symbol_names = set(self.old_binary.symbols.keys())
      self.new_symbol_names = set(self.new_binary.symbols.keys())

      self.symbols_only_in_old = sorted(self.old_symbol_names - self.new_symbol_names)
      self.symbols_only_in_new = sorted(self.new_symbol_names - self.old_symbol_names)
      
      self.computeNumSymbolsPersisting()
      self.computeNumSymbolsDisappeared()
      self.computeNumSymbolsNew()
      
      self.computeNumAssembliesDiffer()

   def computeNumSymbolsPersisting(self):
      
      self.num_symbol_size_changes = 0
      for symbol_name in self.common_symbol_names:
         old_symbol = self.old_binary.symbols[symbol_name]
         new_symbol = self.new_binary.symbols[symbol_name]
         if old_symbol.size != new_symbol.size:
            self.num_symbol_size_changes += 1
   
   def computeNumSymbolsDisappeared(self):
      self.num_bytes_disappeared = 0
      self.num_symbols_disappeared = len(self.symbols_only_in_old)
      for symbol_name in self.symbols_only_in_old:
         symbol = self.old_binary.symbols[symbol_name]
         self.num_bytes_disappeared += symbol.size
         
   def computeNumSymbolsNew(self):
      self.num_bytes_new = 0
      self.num_symbols_new = len(self.symbols_only_in_new)
      for symbol_name in self.symbols_only_in_new:
         symbol = self.new_binary.symbols[symbol_name]
         self.num_bytes_new += symbol.size
   
   def computeNumAssembliesDiffer(self):
      self.num_assemblies_differ = 0
      for symbol_name in self.common_symbol_names:
         old_symbol = self.old_binary.symbols[symbol_name]
         new_symbol = self.new_binary.symbols[symbol_name]
         
         if not old_symbol.__eq__(new_symbol):
            self.num_assemblies_differ += 1
            
   def getMemChangeHTML(self, old_size, new_size):
      difference = new_size - old_size
      
      if difference > 0:
         css_class = "deterioration"
      elif difference < 0:
         css_class = "improvement"
      else:
         css_class = "unchanged"
         
      return "<span  class=\"%s\">%+d</span>" % (css_class, difference)
   
   def generatePersistingSymbolsTableHTML(self):
      
      table_html = ""
      
      import operator
      
      diff_by_symbol = {}
      for symbol_name in self.common_symbol_names:
         old_symbol = self.old_binary.symbols[symbol_name]
         new_symbol = self.new_binary.symbols[symbol_name]
         
         difference = new_symbol.size - old_symbol.size
         
         diff_by_symbol[symbol_name] = difference
         
      sorted_by_diff = sorted(diff_by_symbol.items(), key=operator.itemgetter(1), reverse=True)   
      
      for symbol_tuple in sorted_by_diff:
         
         symbol_name = symbol_tuple[0]
         
         old_symbol = self.old_binary.symbols[symbol_name]
         new_symbol = self.new_binary.symbols[symbol_name]
         
         if old_symbol.size != new_symbol.size:
            symbol_name_html = self.fixStringForHTML(symbol_name)
            table_html += "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>\n" % (symbol_name_html, old_symbol.size, new_symbol.size, self.getMemChangeHTML(old_symbol.size, new_symbol.size))
            
      return table_html
      
   def generateDisappearedSymbolsTableHTML(self):
      
      table_html = ""
      
      for symbol_name in sorted(self.symbols_only_in_old, \
                                key=lambda symbol_name: self.old_binary.symbols[symbol_name].size, \
                                reverse = True):
         symbol_name_html = self.fixStringForHTML(symbol_name)
         symbol = self.old_binary.symbols[symbol_name]
         table_html += "<tr><td>%s</td><td>%s</td></tr>\n" % (symbol_name_html, symbol.size)
            
      return table_html    
   
   def generateNewSymbolsTableHTML(self):
      
      table_html = ""
      
      for symbol_name in sorted(self.symbols_only_in_new, \
                                key=lambda symbol_name: self.new_binary.symbols[symbol_name].size, \
                                reverse = True):
         symbol_name_html = self.fixStringForHTML(symbol_name)
         symbol = self.new_binary.symbols[symbol_name]
         table_html += "<tr><td>%s</td><td>%s</td></tr>\n" % (symbol_name_html, symbol.size)
            
      return table_html
   
   def getTendencySymbol(self, from_size, to_size):
      if from_size > to_size:
         return "*"
      return ""
         
   def formatMemChange(self, what, from_size, to_size):
      tendency_symbol = self.getTendencySymbol(from_size, to_size)
      difference = to_size - from_size
      return "%s: %d -> %d bytes (%+d bytes) %s" % (what, from_size, to_size, difference, tendency_symbol)
   
   def generatePersistentSymbolDetails(self):
      
      text = ""
      
      for symbol_name in self.common_symbol_names:
         
         old_symbol = self.old_binary.symbols[symbol_name]
         new_symbol = self.new_binary.symbols[symbol_name]
         
         if not old_symbol.__eq__(new_symbol):
            symbol_differences = old_symbol.getDifferencesAsString(new_symbol, "   ")
            if old_symbol.size == new_symbol.size:
               size_info = "size unchanged"
            else:
               size_info = self.formatMemChange("", old_symbol.size, new_symbol.size)
            text += "******************************************************************\n"
            text += "%s (%s)\n" % (symbol_name, size_info)
            text += "******************************************************************\n"
            text += "%s\n" % (symbol_differences)
            
      return text
   
   def generateDisappearedSymbolDetails(self):
      
      text = ""
      
      if len(self.symbols_only_in_old) > 0:
         for symbol_name in self.symbols_only_in_old:
            symbol = self.old_binary.symbols[symbol_name]
            text += "******************************************************************\n"
            text += "%s: %d bytes\n" % (symbol_name, symbol.size)
            text += "******************************************************************\n"
            text += symbol.getInstructionsBlock("   ") + "\n"
            
      return text
   
   def generateNewSymbolDetails(self):
      
      text = ""
      
      if len(self.symbols_only_in_new) > 0:
         for symbol_name in self.symbols_only_in_new:
            symbol = self.new_binary.symbols[symbol_name]
            text += "******************************************************************\n"
            text += "%s: %d bytes\n" % (symbol_name, symbol.size)
            text += "******************************************************************\n"
            text += symbol.getInstructionsBlock("   ") + "\n"
            
      return text
   
   def fixStringForHTML(self, string):
      s1 = string.replace("<", "&lt;")
      return s1.replace(">", "&gt;")
      
   def writeHTMLFile(self):
      
      import os, inspect
      
      repo_path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
      
      # If we generate a pdf files, we skip the details
      #
      if self.settings.pdf_file:
         persisting_symbols_raw = "skipped"
         disappeared_symbols_raw = "skipped"
         new_symbols_raw = "skipped"
      else:
         persisting_symbols_raw = self.fixStringForHTML(self.generatePersistentSymbolDetails())
         disappeared_symbols_raw = self.fixStringForHTML(self.generateDisappearedSymbolDetails())
         new_symbols_raw = self.fixStringForHTML(self.generateNewSymbolDetails())
      
      if self.settings.project_title:
         doc_title = self.settings.project_title
      else:
         doc_title = "ELF Binary Comparison"
      
      keywords = {
          "page_title" : u"ELF Binary Comparison - (c) 2019 by noseglasses"
         ,"doc_title" : doc_title   
         ,"elf_diff_repo_base" : repo_path
         ,"old_binary_file" : self.settings.old_alias
         ,"new_binary_file" : self.settings.new_alias
         
         ,"code_size_old_overall" : str(self.old_binary.progmem_size)
         ,"code_size_new_overall" : str(self.new_binary.progmem_size)
         ,"code_size_change_overall" : self.getMemChangeHTML(self.old_binary.progmem_size, self.new_binary.progmem_size)
         ,"static_ram_old_overall" : str(self.old_binary.static_ram_size)
         ,"static_ram_new_overall" : str(self.new_binary.static_ram_size)
         ,"static_ram_change_overall" : self.getMemChangeHTML(self.old_binary.static_ram_size, self.new_binary.static_ram_size)
         ,"text_size_old_overall" : str(self.old_binary.text_size)
         ,"text_size_new_overall" : str(self.new_binary.text_size)
         ,"text_size_change_overall" : self.getMemChangeHTML(self.old_binary.text_size, self.new_binary.text_size)
         ,"data_size_old_overall" : str(self.old_binary.data_size)
         ,"data_size_new_overall" : str(self.new_binary.data_size)
         ,"data_size_change_overall" : self.getMemChangeHTML(self.old_binary.data_size, self.new_binary.data_size)
         ,"bss_size_old_overall" : str(self.old_binary.bss_size)
         ,"bss_size_new_overall" : str(self.new_binary.bss_size)
         ,"bss_size_change_overall" : self.getMemChangeHTML(self.old_binary.bss_size, self.new_binary.bss_size)
         
         ,"total_symbols_old" : str(len(self.old_binary.symbols.keys()))
         ,"total_symbols_new" : str(len(self.new_binary.symbols.keys()))
                  
         ,"num_persisting_symbols" : str(len(self.common_symbol_names))
         ,"num_disappeared_symbols" : str(self.num_symbols_disappeared)
         ,"num_new_symbols" : str(self.num_symbols_new)
         
         ,"persisting_symbols_table" : self.generatePersistingSymbolsTableHTML()
         ,"disappeared_symbols_table" : self.generateDisappearedSymbolsTableHTML()
         ,"new_symbols_table" : self.generateNewSymbolsTableHTML()
         
         ,"persisting_symbols_raw" : persisting_symbols_raw
         ,"disappeared_symbols_raw" : disappeared_symbols_raw
         ,"new_symbols_raw" : new_symbols_raw
      }
      
      import jinja2
      from jinja2 import Environment, FileSystemLoader, StrictUndefined
      
      env = Environment(loader=FileSystemLoader(repo_path), \
                                       undefined = StrictUndefined)
           
      #addGlobalJinjaFunction(GetComponentLink)
        
      try:
         creator = env.get_template("template.html")
         
      except jinja2.exceptions.TemplateError as e:
         print "Error creating jinja creator\n" + str(e)
         sys.exit(1)
         
      try:
         replacedContent = creator.render(keywords)
      except (jinja2.exceptions.TemplateError) as e:
         print "Error rendering jinja file \'" + \
            self.settings.html_file + "\'\n" + str(e)
         sys.exit(1)
      
      htmlFile = open(self.settings.html_file, 'w')
      
      htmlFile.write(replacedContent.encode('utf8'))
      
      htmlFile.close()
  
   def writeTextFile(self):
      
      out = self.settings.out
      
      if self.settings.project_title:
         title = self.settings.project_title + " - Binary Comparison"
      else:
         title = "ELF Binary Comparison"
      
      out.write("%s\n" % (title))
      out.write("   (c) 2019 by noseglasses (shinynoseglasses@gmail.com)\n")
      
      out.write("Comparing binaries\n")
      out.write("   old: %s\n" % (self.settings.old_alias))
      out.write("   new: %s\n" % (self.settings.new_alias))
      
      out.write("\n")
      
      if self.old_binary == self.new_binary:
         out.write("   No symbol differences\n")
         return
      
      out.write("Binary size:\n")
      if self.old_binary.progmem_size == self.new_binary.progmem_size:
         out.write("   no changes\n")
      else:
         out.write("   " + self.formatMemChange("overall", self.old_binary.progmem_size, self.new_binary.progmem_size) + "\n")
         out.write("   " + self.formatMemChange("text", self.old_binary.text_size, self.new_binary.text_size) + "\n")
         out.write("   " + self.formatMemChange("data", self.old_binary.data_size, self.new_binary.data_size) + "\n")
         
      out.write("\n")
      
      out.write("Static RAM consumption:\n")
      if self.old_binary.static_ram_size == self.new_binary.static_ram_size:
         out.write("   no changes\n")
      else:
         out.write("   " + self.formatMemChange("overall", self.old_binary.static_ram_size, self.new_binary.static_ram_size) + "\n")
         out.write("   " + self.formatMemChange("data", self.old_binary.data_size, self.new_binary.data_size) + "\n")
         out.write("   " + self.formatMemChange("bss", self.old_binary.bss_size, self.new_binary.bss_size) + "\n")
           
      out.write("\n") 
      out.write("text: code instructions\n")
      out.write("data: initilized global or static variables\n")
      out.write("bss: uninitialized global or static variables\n")
         
      out.write("\n")
      
      out.write("%d symbols found in %s\n" % (len(self.old_binary.symbols.keys()), self.settings.old_alias))
      out.write("%d symbols found in %s\n" % (len(self.new_binary.symbols.keys()), self.settings.new_alias))
      
      out.write("\n")
      
      out.write("%d symbols persisted\n" % (len(self.common_symbol_names)))
      
      out.write("\n")
      
      if self.num_symbol_size_changes != 0:
         out.write("%d symbols changed size:\n" % (self.num_symbol_size_changes))
         
         for symbol_name in self.common_symbol_names:
            old_symbol = self.old_binary.symbols[symbol_name]
            new_symbol = self.new_binary.symbols[symbol_name]
            if old_symbol.size != new_symbol.size:
               out.write("   " + self.formatMemChange(symbol_name, old_symbol.size, new_symbol.size) + "\n")
         
      out.write("\n")
      
      if len(self.symbols_only_in_old) > 0:
         
         out.write("%d symbols dissappeared (%d bytes, see details below):" % (self.num_symbols_disappeared, self.num_bytes_disappeared) + "\n")
         
         for symbol_name in self.symbols_only_in_old:
            symbol = self.old_binary.symbols[symbol_name]
            out.write("   %s: %d bytes" % (symbol_name, symbol.size) + "\n")
               
      out.write("\n")
      
      if len(self.symbols_only_in_new) > 0:

         out.write("%d new symbols (%d bytes, see details below):" % (self.num_symbols_new, self.num_bytes_new) + "\n")
         
         for symbol_name in self.symbols_only_in_new:
            symbol = self.new_binary.symbols[symbol_name]
            out.write("   %s: %d bytes" % (symbol_name, symbol.size) + "\n")
               
      out.write("\n")
            
      out.write("########################################################################\n")
      out.write("Details follow\n")
      out.write("########################################################################\n")
      
      out.write("\n")
      
      out.write("The following %d symbols' assembly differs\n" % (self.num_assemblies_differ) + "\n")

      out.write(self.generatePersistentSymbolDetails())
      out.write(self.generateDisappearedSymbolDetails())
      out.write(self.generateNewSymbolDetails())
  
if __name__ == "__main__":
   driver = Driver()
